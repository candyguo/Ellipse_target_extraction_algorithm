void tjhscsDlg::MouseCallback1(int mouseEvent,int x,int y,int flags,void* param) 
{
	drawbox* box = (drawbox*)param; 
	switch(mouseEvent) 
	{ 
	case CV_EVENT_LBUTTONDOWN: 
		box->point1 = Point(x,y); 
		box->point2 = Point(x,y); 
		box->isDraw = true; 
		break; 
	case CV_EVENT_MOUSEMOVE: 
		box->point2 = Point(x,y); 
		break; 
	case CV_EVENT_LBUTTONUP: 
		Mat midimage;
		//char tmp[20];
		box->point2 = Point(x,y); 
		if(box->point1==box->point2)
			box->isDraw=false;
		else
		{
			//rectangle(box->image,box->point1,box->point2,Scalar(255,255,255));
			Mat imageROI=box->image(Rect(box->point1,box->point2));
			//pyrUp(imageROI,imageROI,Size(imageROI.cols*2,imageROI.rows*2));
			Mat threshold_output;
			vector<vector<Point> > contours;
			vector<Vec4i> hierarchy;


			cvtColor(imageROI,imageROI,CV_BGR2GRAY);
			GaussianBlur( imageROI, midimage, Size(3,3), 0, 0);
		
			cv::adaptiveThreshold(midimage, threshold_output, 255, cv::ADAPTIVE_THRESH_MEAN_C,cv::THRESH_BINARY, 31, 0);
		    //Canny(midimage, threshold_output,60,125,3);//canny与阈值的检测效果差不多
		//threshold( imageROI, threshold_output, 0, 255, CV_THRESH_OTSU|THRESH_BINARY );//大津法阈值
		//adaptiveThreshold(imageROI, threshold_output,255,CV_ADAPTIVE_THRESH_MEAN_C,CV_THRESH_BINARY,3,5);
		//dilate(threshold_output,threshold_output,kernel);
		    findContours( threshold_output, contours, hierarchy, CV_RETR_TREE, CV_CHAIN_APPROX_SIMPLE, Point(0, 0) );

		/// 对每个找到的轮廓创建可倾斜的边界框和椭圆
		vector<RotatedRect> minRect( contours.size() );
		vector<RotatedRect> minEllipse( contours.size() );
		vector<RotatedRect> mEllipse( contours.size() );
		for( int i = 0; i < contours.size(); i++ )
		{ 
			minRect[i] = minAreaRect( Mat(contours[i]));//点数组进行拟合
		if( contours[i].size() > 8)
		{ 
			minEllipse[i] = fitEllipse( Mat(contours[i]) ); 
			mEllipse[i]=minEllipse[i];
		}
		}
		std::vector<cv::Point2f> center(contours.size());
		for( int i = 0; i< contours.size(); i++ )
		{
			Scalar color = Scalar(0,0,255);
			char tmp[20];
			// contour
			//drawContours( box->image, contours, i, Scalar(255,0,0), 1, 8, vector<Vec4i>(), 0, Point() );
			// ellipse
			if(abs(minEllipse[i].size.width-minEllipse[i].size.height)>5)
				continue;
			if(minEllipse[i].size.width*minEllipse[i].size.height>450||minEllipse[i].size.width*minEllipse[i].size.height<25)
				continue; 
			center[i] = minEllipse[i].center;
			cv::cornerSubPix(imageROI , center, cv::Size(5,5), cv::Size(-1, -1),
				cv::TermCriteria(cv::TermCriteria::COUNT + cv::TermCriteria::EPS, 50, 0.001));
			mEllipse[i].center.x=center[i].x+min(box->point1.x,box->point2.x)+0.5;
			mEllipse[i].center.y=center[i].y+min(box->point1.y,box->point2.y)+0.5;
			/*float radius=0;  
			Point2f centers(0,0);  
			minEnclosingCircle(Mat(contours[i]),centers,radius);
			centers.x=centers.x+min(box->point1.x,box->point2.x);
			centers.y=centers.y+min(box->point1.x,box->point2.x);
			circle(box->image,Point(centers),static_cast<int>(radius),Scalar(0,0,255),2);
			*/
			ellipse( box->image,mEllipse[i],color, 1, 8 );
			sprintf(tmp,"(%d,%.1f,%.1f)",id++,mEllipse[i].center.x,mEllipse[i].center.y);
			Point org(mEllipse[i].center.x+6,mEllipse[i].center.y );
			putText(box->image,tmp,org,CV_FONT_HERSHEY_COMPLEX_SMALL,0.8,Scalar(139,77,93));
		}
		}
		box->isDraw = false; 
		break; 
	} 
} 

void tjhscsDlg::OnBnClickedboxdetect()
{
	// TODO: 在此添加控件通知处理程序代码
	m_FileName.Replace(_T("\\"),_T("\\\\"));
	USES_CONVERSION;
	CHAR* fileName = T2A(m_FileName.GetBuffer(m_FileName.GetLength()));
	Mat scrimage=cvLoadImage(fileName);
	namedWindow("目标点识别窗口",0);
	//imshow("目标点识别窗口",scrimage);//图像载入处理


	drawbox box; 
	box.point1 = Point(0,0); 
	box.point2 = Point(0,0); 

	box.image = scrimage;
	box.temp = box.image.clone(); 
	box.isDraw = false; 

	cvSetMouseCallback("目标点识别窗口",MouseCallback,&box); //设置鼠标响应以及响应的实现
	while(1) 
	{ 
		//box.temp = box.image;
		box.temp = box.image.clone();
		if(box.isDraw)   
		{ 
			rectangle(box.temp,box.point1,box.point2,Scalar(0,255,0)); 
		} 
		imshow("目标点识别窗口",box.temp); 
		if(cvWaitKey(30) == 27)  break; //按下esc退出程序
	}  

}
